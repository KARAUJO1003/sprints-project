// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Pessoa {
  id          String       @id @default(uuid())
  nome        String
  email       String       @unique
  telefone    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Colaborador Colaborador?
}

model Vaga {
  id          String   @id @default(uuid())
  titulo      String
  descricao   String
  statusId    String
  categoriaId String
  posicaoId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Status    Status    @relation(fields: [statusId], references: [id])
  Categoria Categoria @relation(fields: [categoriaId], references: [id])
  Posicao   Posicao   @relation(fields: [posicaoId], references: [id])

  Colaboradores Colaborador[]
  Phases        Phase[]
}

model Colaborador {
  id       String @id @default(uuid())
  pessoaId String @unique
  vagaId   String

  Pessoa Pessoa @relation(fields: [pessoaId], references: [id])
  Vaga   Vaga   @relation(fields: [vagaId], references: [id])
}

model Posicao {
  id        String   @id @default(uuid())
  nome      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Vagas     Vaga[]
}

model Status {
  id        String   @id @default(uuid())
  nome      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Vagas     Vaga[]
}

model Categoria {
  id        String   @id @default(uuid())
  nome      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Vagas     Vaga[]
}

model Phase {
  id        String   @id @default(uuid())
  nome      String
  vagaId    String
  ordem     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Vaga Vaga @relation(fields: [vagaId], references: [id])
}

enum UsuarioTipo {
  ADMIN
  GESTOR_GERAL
  GESTOR_GERENCIA
  COLABORADOR
}

model Gerencia {
  id        String         @id @default(cuid())
  nome      String
  gestorId  String
  gestor    Usuario        @relation("GerenciaGestor", fields: [gestorId], references: [id])
  usuarios  Usuario[]      @relation("UsuariosDaGerencia")
  projetos  Projeto[]
  metas     MetaGerencia[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Usuario {
  id                       String                    @id @default(cuid())
  nome                     String
  email                    String                    @unique
  senha                    String
  cargo                    String
  tipo                     UsuarioTipo
  gerenciaId               String?
  gerencia                 Gerencia?                 @relation("UsuariosDaGerencia", fields: [gerenciaId], references: [id])
  tarefas                  Tarefa[]                  @relation("ResponsavelTarefa")
  subtarefas               Subtarefa[]               @relation("ResponsavelSubtarefa")
  gerencias                Gerencia[]                @relation("GerenciaGestor") // gestor de várias gerências
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  historicosAcompanhamento HistoricoAcompanhamento[] @relation("UsuarioHistorico")
}

model Sprint {
  id         String         @id @default(cuid())
  nome       String
  tipo       SprintTipo
  dataInicio DateTime
  dataFim    DateTime
  descricao  String?
  projetos   Projeto[]
  metas      MetaGerencia[]
}

enum SprintTipo {
  TRIMESTRE
  QUADRIMESTRE
  SEMESTRE
  ANUAL
  PERSONALIZADO
}

model Projeto {
  id             String                    @id @default(cuid())
  titulo         String
  descricao      String?
  status         StatusProjeto
  metaPercentual Float
  gerenciaId     String
  sprintId       String
  gerencia       Gerencia                  @relation(fields: [gerenciaId], references: [id])
  sprint         Sprint                    @relation(fields: [sprintId], references: [id])
  tarefas        Tarefa[]
  historicos     HistoricoAcompanhamento[]
}

enum StatusProjeto {
  PLANEJADO
  EM_ANDAMENTO
  CONCLUIDO
  CANCELADO
}

model Tarefa {
  id            String                    @id @default(cuid())
  titulo        String
  descricao     String?
  prioridade    String?
  status        StatusTarefa
  dataInicio    DateTime?
  dataFim       DateTime?
  projetoId     String
  responsavelId String
  projeto       Projeto                   @relation(fields: [projetoId], references: [id])
  responsavel   Usuario                   @relation("ResponsavelTarefa", fields: [responsavelId], references: [id])
  subtarefas    Subtarefa[]
  historicos    HistoricoAcompanhamento[] @relation()
}

enum StatusTarefa {
  PENDENTE
  EM_PROGRESSO
  CONCLUIDA
}

model Subtarefa {
  id            String       @id @default(cuid())
  titulo        String
  descricao     String?
  status        StatusTarefa
  dataInicio    DateTime?
  dataFim       DateTime?
  tarefaId      String
  responsavelId String
  tarefa        Tarefa       @relation(fields: [tarefaId], references: [id])
  responsavel   Usuario      @relation("ResponsavelSubtarefa", fields: [responsavelId], references: [id])
}

model MetaGerencia {
  id              String   @id @default(cuid())
  gerenciaId      String
  sprintId        String
  metaEsperada    Float
  metaAlcancada   Float    @default(0)
  percentualBonus Float
  gerencia        Gerencia @relation(fields: [gerenciaId], references: [id])
  sprint          Sprint   @relation(fields: [sprintId], references: [id])
}

model RegraBonificacao {
  id               String @id @default(cuid())
  descricao        String
  regraJson        Json
  valorMaximoBonus Float
}

model HistoricoAcompanhamento {
  id        String   @id @default(cuid())
  projetoId String?
  tarefaId  String?
  usuarioId String
  descricao String
  data      DateTime @default(now())
  projeto   Projeto? @relation(fields: [projetoId], references: [id])
  tarefa    Tarefa?  @relation(fields: [tarefaId], references: [id])
  usuario   Usuario  @relation("UsuarioHistorico", fields: [usuarioId], references: [id])
}
